
Changelog of Unity_Tools version 0.2.1

Release date: [Date]


------------------------
 Notes
------------------------

This update introduces new components, thread safe pooling, improvements to existing components and bug fixes.
Some components were removed, as they were fundamentally faulty, they may be reintroduced at a later stage.


------------------------
 New features
------------------------

 - New class: Collections/OpenQueue.cs								A queue like implementation that allows dequeue operations on subsets of the queue (eg. dequeue first match, dequeue all matches, etc.)
 - New class: Collections/PointQuadtree.cs							A quadtree implementation like the PointOctree but for 2D.
 - New interface: Collections/Interfaces/IPoint2DCollection.cs		Interface for 2D point collections.
 - New class: Components/WorkManager.cs								A manager class that provides functionality to queue work tasks and works them of sequentially, work tasks can be run asynchronously or on the Unity main thread.
 - New class: Core/Common/StopwatchExt.cs							An alternative stopwatch implementation that allows to record checkpoints which simplifies measuring time of multiple code segments.
 - New struct: Core/Geometry/AreaInverse.cs							A 2d area that represents the outside of another 2d area.
 - New struct: Core/Geometry/Capsule2.cs							A 2d area that represents a line with radius, also known as stadium-shape
 - New interface: Core/Interfaces/IArea.cs							Interface for 2D shapes. 
 - New class: Core/Utils/ColorUtil.cs								Helper class for color based operations.
 - New class: Components/WorkManager.cs								A manager class that provides functionality to queue work tasks and works them of sequentially, work tasks can be run asynchronously or on the Unity main thread.
 - New class: Experimental/PolyMesh.cs								(WIP) An experimental implementation of a polygon mesh, that allows for efficient mesh queries and modifications, should replace experimental MeshBuilder
 - New class: Experimental/VoxelArea2.cs							(WIP) A 2d area for arbitrary shapes using a voxel-tree, supports boolean operations
 - New class: Pooling/ConcurrentGlobalPool.cs						A thread safe implementation of the global pool
 - New class: Pooling/ConcurrentGlobalListPool.cs					A thread safe implementation of the global list pool
 - New class: Pooling/ConcurrentListPool.cs							A thread safe implementation of the list pool
 - New class: Pooling/ConcurrentPool.cs								A thread safe implementation of the pool
 - New class: Pooling/ConcurrentPoolBase.cs							A thread safe implementation of the pool base
 - New class: Pooling/ConcurrentSpecializedPool.cs					A thread safe implementation of the specialized pool 


------------------------
 Changes
------------------------

 - Collections: Moved AvlNodes into AvlTree 
 - Collections: Created a more flexible queue that allows to work on queue subsets.
 - Collections: Moved interfaces to Collections/Interfaces/ folder. No namespace adaption needed.
 - Components: In CallProvider, introduced the option to keep the call order when removing listeners, this allows for determinstic simulations.
 - Core: In CallController, introduced the option to keep the call order when removing listeners, this allows for deterministic simulations.
 - Core: In CatmulRomSpline, added convenience functions to get forward, backward, right, left, up and down vectors at a given position on the spline. (Right and left being on the horizontal plane)
 - Core: In CatmulRomSpline, added method GetSegmentData to extract the segment data making up the spline (4*vector3 per segment: a, b, c, d).
 - Core: Removed VolumeAll, VolumeEmpty, VolumeIntersection, VolumeUnion and VolumeDifference, as they didn't work with in a concave case, which made them unusable in the general case.
 - Core: Renamed Core/Primitives/ folder to Core/Geometry/. No namespace adaption needed.
 - Core: In CallController, introduced the option to keep the call order when removing listeners, this allows for deterministic simulations.
 - Components: In CallProvider, introduced the option to keep the call order when removing listeners, this allows for determinstic simulations. 
 - Examples: Added example file for using the main thread dispatch (Async raycasting example)
 - Pooling: Created concurrent (thread safe) variants of all pools in UnityTools.Pooling namespace 


------------------------
 Fixed bugs
------------------------

 - Fixed bug in UnityTools.Pooling.PoolBase and UnityTools.Pooling.ListPool that caused items to get discarded immediately when trying to pool them.
 - Fixed Math3D.CartesianToSpherical and Math3D.SphericalToCartesian, so they actually are inverse functions of each other and properly work with Unity's coordinate system
 - Fixed MainThreadDispatch 


------------------------
 Breaking changes
------------------------

 - Renamed namespace Unity_Tools to UnityTools
 - Made all pools sealed, as they weren't intended to be inherited.
 - Made AvlNodes.cs private, use the AvlTree for queries instead.
 - Removed faulty structs: VolumeAll, VolumeEmpty, VolumeIntersection, VolumeUnion and VolumeDifference
 - Removed Dots features to remove dependency on Dots package: NativePolyMesh, NativeCatmulRomSpline
